#include "Object.h"

/* List to contain Objects, which are a generic interface with many subclasses
     e.g. Integer, String */
class List {
public:
    List() {
        List(DEFAULT_CAPACITY);
    }

    List(int capacity) : capacity(capacity), size(0) {
        array = new Object[capacity];
    }

    // BUG missing destructor

    void add(Object o) {
        if (capacity == size) {
            Object *temp = new Object[capacity *= 2];
            for (int i = 0; i < size; i++)
                temp[i] = array[i];
            array = temp; // memory leak, need to delete old array
        }

        array[size++] = o;
    }

    bool remove(Object o) {
        for (int i = 0; i < size; i++) {
            if (o.equals(array[i])) { // BUG seg faults when trying to remove NULL
                size--;
                for (int j = i; j < size; j++)
                    array[j] = array[j + 1];
                return true;
            }
        }

        return false;
    }

    // BUG negative index would result in accessing garbage memory
    // DESIGN should thrown an exception instead of return null
    Object get(int index) {
        if (index < size)
            return array[index];
        return NULL;
    }

    int getSize() {
        return size;
    }

private:
    static const int DEFAULT_CAPACITY = 10;

    int capacity;
    int size;

    // BUG inserted items are copied, since they are not references,
    //   so subclasses will lose their more specific identity
    //   for more info see:
    //   http://stackoverflow.com/questions/274626/what-is-object-slicing
    Object *array;
};

/*

Other notes:
  * some code style isn't ideal, due to this being easier to print on one page
  * templates are great, but supporting an Object super class is still valid
  * returning NULL in get() is a bad idea for out-of-bounds due to the ambiguity; was the index invalid, or a null a that position?

*/
