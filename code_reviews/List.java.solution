class List {
    public static final int DEFAULT_SIZE = 10;

    private Object[] array;
    private int mySize;

    public List() {
        this(DEFAULT_SIZE);
    }

    public List(int size) {
        array = new Object[size];
        mySize = 0;
    }

    public void add(Object o) {
        if (mySize == array.length) {
            Object[] temp = new Object[array.length * 2];
            for (int i = 0; i < array.length; i++)
                temp[i] = array[i];
            array = temp;
        }

        array[mySize++] = o;
    }

    /**
     * Remove the first occurrence of an object, if any.
     */
    public boolean remove(Object o) {
        for (int i = 0; i < mySize; i++) {
            if (array[i].equals(o)) { // can cause a NullPointerException
                mySize--;
                for (int j = i; j < mySize; j++)
                    // leaves a dangling reference, this is a memory leak
                    array[j] = array[j + 1];
                return true;
            }
        }

        return false;
    }

    // can cause an out of bounds exception when negative is passed
    // because null is returned, can't tell if too big of index was used
    //   null would be more ok if were also returned for negative indexes
    //   but exceptions are still better
    public Object get(int index) {
        if (index < mySize)
            return array[index];
        return null;
    }

    public int size() {
        return array.length; // should be returning mySize
    }
}
